---
- name: Delete cluster if already existed
  ansible.builtin.shell:
    cmd: "kcli delete plan -y {{ provisioner_cluster_name }}"
    chdir: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}"
  ignore_errors: true

- name: Create default pool if not already exists
  shell: "kcli create pool default -p {{ provisioner_cluster_libvirt_pool | default('/var/lib/libvirt/images') }}"
  ignore_errors: true

- name: Create default network for vms
  shell: "kcli create network -c {{ default_libvirt_range }} --domain default default"
  ignore_errors: true

- name: Remove installation directory
  file:
    state: absent
    path: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}"

- name: Download the kcli plan
  ansible.builtin.git:
    repo: https://github.com/karmab/kcli-openshift4-baremetal
    dest: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}"
    force: yes

- name: Copy the kcli template
  template:
    src: "{{ role_path }}/templates/kcli_parameters.yml.j2"
    dest: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}/kcli_parameters.yml"

- name: Copy pull secret to the same directory
  copy:
    content: "{{ pull_secret }}"
    dest: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}/openshift_pull.json"

- name: Download centos8 image
  shell: kcli download image centos8
  args:
    chdir: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}"

- name: Delete plan if it was created
  ansible.builtin.shell:
    cmd: "kcli delete plan --yes plan_{{ provisioner_cluster_name }}"
  ignore_errors: true

- name: Create the kcli host
  ansible.builtin.shell:
    cmd: "kcli create host kvm -H 127.0.0.1 local"
  ignore_errors: true

- name: Deploy the cluster
  ansible.builtin.shell:
    cmd: "kcli create plan --paramfile {{ temporary_path }}//kcli_{{ provisioner_cluster_name }}/kcli_parameters.yml plan_{{ provisioner_cluster_name }}"
    chdir: "{{ temporary_path }}/kcli_{{ provisioner_cluster_name }}"

- name: Wait until we get some IP
  shell: "kcli info vm {{ provisioner_cluster_name }}-installer -f ip -v"
  register: disconnecter_vm
  retries: 5
  delay: 30
  until: disconnecter_vm.stdout|ipaddr('bool') == True

- name: Wait for ssh to be available
  wait_for:
    port: 22
    host: "{{ disconnecter_vm.stdout }}"
    delay: 30
    timeout: 300

- name: Wait until cert is present
  ansible.builtin.shell:
    cmd: "kcli ssh root@{{ provisioner_cluster_name }}-installer 'while [ ! -f /opt/registry/certs/domain.crt ]; do sleep 30; done'"

- name: Copy certificate to trusted certs path
  shell: "kcli scp root@{{ provisioner_cluster_name }}-installer:/opt/registry/certs/domain.crt /etc/pki/ca-trust/source/anchors/"

- name: Update ca trust
  shell: "update-ca-trust"

