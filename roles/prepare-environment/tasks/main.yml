---
- name: Install needed packages
  yum:
    name:
      - python3-pip
      - openssl-devel
      - make
      - podman
      - skopeo
      - jq
      - git
      - libvirt
      - libvirt-daemon-driver-qemu
      - qemu-kvm
      - chrony
    state: present

- name: Create temporary directory
  tempfile:
    state: directory
  register: temporary_directory

- name: Install golang
  ansible.builtin.shell:
    cmd: "{{ item }}"
  args:
    creates: /usr/local/go
  with_items:
    - "curl {{ golang_url | default('https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz') }} -o {{ temporary_directory.path }}/go.tar.gz"
    - "tar -zxvf {{ temporary_directory.path }}/go.tar.gz -C /usr/local/"
    - "echo 'export GOROOT=/usr/local/go' | tee -a /etc/profile"
    - "echo 'export PATH=$PATH:/usr/local/go/bin' | tee -a /etc/profile"

- name: create bridge interface
  community.general.nmcli:
    conn_name: "{{ provisioner_cluster_network }}"
    ifname: "{{ provisioner_cluster_network }}"
    type: bridge
    state: present
    stp: no
    method4: disabled
    method6: manual
    ip6: "{{ provisioner_ip }}/{{ provisioner_mask }}"
  become: yes

- name: create bridge interface slave
  ansible.builtin.shell:
    cmd: "nmcli con modify {{ bridge_nic }} master {{ provisioner_cluster_network }} slave-type bridge"
  become: yes

- name: And activate it
  ansible.builtin.shell:
    cmd: "nmcli con up {{ item }}"
  become: yes
  with_items:
  - "{{ bridge_nic }}"
  - "{{ provisioner_cluster_network }}"

- name: Copy radvd template to config
  template:
    src: "templates/radvd.conf.j2"
    dest: "/etc/radvd.conf"

- name: Copy template to config directory
  template:
    src: "templates/ipv6.hostsfile.j2"
    dest: "/etc/dnsmasq.d/ipv6.hostsfile"

- name: Install and configure dnsmasq
  include_role:
    name: robertdebock.dnsmasq
  vars:
    dnsmasq_conf_file: "/etc/dnsmasq.d/ipv6.hostsfile"
    dnsmasq_domain_needed: no
    dnsmasq_strict_order: yes
    dnsmasq_user: dnsmasq
    dnsmasq_group: dnsmasq
    dnsmasq_interfaces:
    - name: "{{ provisioner_cluster_network }}"
    dnsmasq_except_interface: lo
    dnsmasq_listen_addresses:
    - name: "{{ provisioner_ip }}"
    dnsmasq_bind_interfaces: yes
    dnsmasq_expand_hosts: yes
    dnsmasq_enable_ra: yes
    dnsmasq_dhcp_authoritative: yes
    dnsmasq_dhcp_ranges:
    - from: "{{ provisioner_dnsmasq_from }}"
      until: "{{ provisioner_dnsmasq_to }}"
      leasetime: 12h
- name: Add IP address of all needed hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ provisioner_hosts[item].hostname }}$'
    line: "{{ provisioner_hosts[item].ip }} {{ provisioner_hosts[item].hostname }}"
    state: present
  with_items: "{{ provisioner_hosts }}"

- name: Add IP address for API and endpoints
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item.name }}$'
    line: "{{ item.ip }} {{ item.name }}"
    state: present
  with_items:
    - { name: "api-int.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}", ip: "{{ provisioner_api_ip }}" }
    - { name: "api.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}", ip: "{{ provisioner_api_ip }}" }
    - { name: "{{ provisioner_cluster_name }}-installer.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}", ip: "{{ provisioner_hosts['mirror'].ip }}" }
    - { name: "console-openshift-console.apps.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}", ip: "{{ provisioner_ingress_ip }}" }
    - { name: "oauth-openshift.apps.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}", ip: "{{ provisioner_ingress_ip }}" }
    - { name: "multicloud-console.apps.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}", ip: "{{ provisioner_ingress_ip }}" }

- name: Enable Copr repository
  command:
      cmd: dnf copr enable -y karmab/kcli 
      creates: /etc/yum.repos.d/_copr:copr.fedorainfracloud.org:karmab:kcli.repo
        
- name: Install kcli package
  yum:
    name:
      - kcli
    state: latest

- name: Configure ipv6 sysctl settings
  sysctl:
    name: net.ipv6.conf.all.accept_ra
    value: 2
    state: present

- name: Configure libvirtd
  ansible.builtin.shell:
    cmd: " usermod -aG qemu,libvirt $(id -un)"
  become: true

- name: Start libvirtd
  ansible.builtin.service:
    name: libvirtd
    state: started

- name: Disable firewalld
  ansible.builtin.service:
    name: firewalld
    state: stopped

- name: Setup chrony as server
  template:
    src: templates/chrony.conf.j2
    dest: /etc/chrony.conf
    owner: root
    group: root
    mode: 0644

- name: Restart chronyd
  ansible.builtin.service:
    name: chronyd
    state: restarted
